function _ts_decorate(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r}function _ts_metadata(k,v){if(typeof Reflect==="object"&&typeof Reflect.metadata==="function")return Reflect.metadata(k,v)}function _ts_param(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}}import{encodeName,LOCAL_STORAGE_MODULE_OPTIONS,LocalStorageDeleteFailedException,LocalStorageListFailedException,LocalStorageModuleOptionsType,LocalStorageUploadFailedException}from"../..";import{Inject,Injectable,InternalServerErrorException,Logger}from"@nestjs/common";import fs,{createWriteStream}from"fs";import path from"path";import{generateUuid}from"../utils/generate-uuid";export class LocalStorageService{async list(){const filePaths=[];async function traverseDirectory(currentDir){const entries=fs.readdirSync(currentDir,{withFileTypes:true});for(const entry of entries){const fullPath=path.join(currentDir,entry.name);if(entry.isDirectory()){await traverseDirectory(fullPath)}else if(entry.isFile()){filePaths.push(fullPath)}}}try{await traverseDirectory(this.options.dir)}catch(error){throw new LocalStorageListFailedException(error)}const keys=filePaths.map(filePath=>{return filePath.replace(this.options.dir+"/","")});return keys}upload(name,buffer,dir){return new Promise((resolve,reject)=>{const encodedName=generateUuid()+"-"+encodeName(name);const year=new Date().getFullYear();const month=new Date().getMonth()+1;const date=new Date().getDate();const path=`${dir}/${year}/${month}/${date}`;const finalDir=`${this.options.dir}/${path}`;if(!fs.existsSync(finalDir)){fs.mkdirSync(finalDir,{recursive:true})}const key=`${path}/${encodedName}`;try{fs.writeFileSync(`${this.options.dir}/${key}`,buffer)}catch(error){reject(new LocalStorageUploadFailedException(error))}resolve({key})})}uploadByStream(req,dir){return new Promise((resolve,reject)=>{req.pipe(req.busboy);req.busboy.on("file",(name,file,info)=>{const{filename}=info;const encodedName=generateUuid()+"-"+encodeName(filename);const year=new Date().getFullYear();const month=new Date().getMonth()+1;const date=new Date().getDate();const path=`${dir}/${year}/${month}/${date}`;const finalDir=`${this.options.dir}/${path}`;if(!fs.existsSync(finalDir)){fs.mkdirSync(finalDir,{recursive:true})}const key=`${path}/${encodedName}`;const ws=createWriteStream(`${this.options.dir}/${key}`);file.on("data",data=>{ws.write(data)});file.on("end",()=>{ws.end();ws.close();resolve({key})});file.on("error",err=>{reject(new LocalStorageUploadFailedException(err))})})})}delete(key){return new Promise((resolve,reject)=>{try{fs.unlinkSync(`${this.options.dir}/${key}`);resolve()}catch(error){reject(new LocalStorageDeleteFailedException(error))}})}deleteMany(keys){try{keys.forEach(key=>{fs.unlinkSync(`${key}`)})}catch(error){throw new LocalStorageDeleteFailedException(error)}}constructor(options){this.options=options;this.logger=new Logger(LocalStorageService.name);Object.keys(this.options).forEach(key=>{const unsetValues=[];if(!this.options[key]){unsetValues.push(key)}if(unsetValues.length>0){throw new InternalServerErrorException(`Local Storage 설정이 필요합니다. Unset Values : [${unsetValues.join(", ")}]`)}})}}LocalStorageService=_ts_decorate([Injectable(),_ts_param(0,Inject(LOCAL_STORAGE_MODULE_OPTIONS)),_ts_metadata("design:type",Function),_ts_metadata("design:paramtypes",[typeof LocalStorageModuleOptionsType==="undefined"?Object:LocalStorageModuleOptionsType])],LocalStorageService);
//# sourceMappingURL=local-storage.service.js.map