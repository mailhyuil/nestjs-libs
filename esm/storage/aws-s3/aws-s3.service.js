function _ts_decorate(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r}function _ts_metadata(k,v){if(typeof Reflect==="object"&&typeof Reflect.metadata==="function")return Reflect.metadata(k,v)}function _ts_param(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}}import{DeleteObjectCommand,DeleteObjectsCommand,ListObjectsV2Command,PutObjectCommand,S3Client}from"@aws-sdk/client-s3";import{getSignedUrl}from"@aws-sdk/s3-request-presigner";import{AWS_S3_MODULE_OPTIONS,AwsS3DeleteFailedException,AwsS3GetPresignedUrlFailedException,AwsS3ListFailedException,AwsS3ModuleOptionsType,AwsS3UploadFailedException}from"../..";import{Inject,Injectable,InternalServerErrorException,Logger}from"@nestjs/common";import path from"path";export class AwsS3Service{async upload(name,buffer){const ext=path.extname(name);const basename=path.basename(name,ext);const key=`original/${basename}_${Date.now()}${ext}`;const command=new PutObjectCommand({Bucket:this.options.bucket,Key:key,Body:buffer});await this.s3.send(command).catch(error=>{throw new AwsS3UploadFailedException(error)});return{key}}uploadByStream(req){return new Promise((resolve,reject)=>{req.pipe(req.busboy);req.busboy.on("file",(name,file)=>{const ext=path.extname(name);const basename=path.basename(name,ext);const key=`original/${basename}_${Date.now()}${ext}`;const command=new PutObjectCommand({Bucket:this.options.bucket,Key:key,Body:file});this.s3.send(command).then(()=>{resolve({key})}).catch(error=>{reject(new AwsS3UploadFailedException(error))})})})}async delete(key){const command=new DeleteObjectCommand({Bucket:this.options.bucket,Key:key});await this.s3.send(command).catch(error=>{throw new AwsS3DeleteFailedException(error)})}async deleteAll(urls){const command=new DeleteObjectsCommand({Bucket:this.options.bucket,Delete:{Objects:urls.map(url=>({Key:url.replace(this.options.cloudfrontDomain+"/","")})),Quiet:false}});const res=await this.s3.send(command).catch(error=>{throw new AwsS3DeleteFailedException(error)});this.logger.log(`
    ${res.Deleted?.length}개 파일이 삭제되었습니다.
`)}async getPresignedUrl({key}){const command=new PutObjectCommand({Bucket:this.options.bucket,Key:key});const url=await getSignedUrl(this.s3,command,{expiresIn:3600}).catch(error=>{this.logger.error(error);throw new AwsS3GetPresignedUrlFailedException(error)});return{url}}async list(){const command=new ListObjectsV2Command({Bucket:this.options.bucket});const{Contents}=await this.s3.send(command).catch(error=>{throw new AwsS3ListFailedException(error)});if(!Contents)return[];const keys=Contents.map(content=>content.Key).filter(key=>typeof key!=="undefined")||[];return keys}constructor(options){this.options=options;this.logger=new Logger(AwsS3Service.name);Object.keys(this.options).forEach(key=>{const unsetValues=[];if(!this.options[key]){unsetValues.push(key)}if(unsetValues.length>0){throw new InternalServerErrorException(`AWS S3 설정이 필요합니다. Unset Values : [${unsetValues.join(", ")}]`)}});this.s3=new S3Client({region:this.options.region,credentials:{accessKeyId:this.options.accessKeyId,secretAccessKey:this.options.secretAccessKey}})}}AwsS3Service=_ts_decorate([Injectable(),_ts_param(0,Inject(AWS_S3_MODULE_OPTIONS)),_ts_metadata("design:type",Function),_ts_metadata("design:paramtypes",[typeof AwsS3ModuleOptionsType==="undefined"?Object:AwsS3ModuleOptionsType])],AwsS3Service);
//# sourceMappingURL=aws-s3.service.js.map